//
//  LoginFirstViewController.m
//  Starucan
//
//  Created by vgool on 16/1/4.
//  Copyright © 2016年 vgool. All rights reserved.
//

#import "LoginFirstViewController.h"
#import "RegisterViewController.h"
#import "WXNavigationController.h"
#import "HomeViewController.h"
#import "ForgetPassViewController.h"
#import "GXHttpTool.h"
#import "MBProgressHUD+NJ.h"
#import <CommonCrypto/CommonDigest.h>
#import "SUCArchive.h"
#import "SUCUser.h"
#import "NSObject+MJKeyValue.h"
#import "MainViewController.h"
#import "AppDelegate.h"
#import "UIButton+Extension.h"
#import "NSData+AES256.h"
#import "AFHTTPRequestOperationManager.h"
#import "SUCTabBarViewController.h"
#import "AddInformationViewController.h"
typedef enum {
    YTHLoginTextFieldAccount = 100, // 帐号输入框
    YTHLoginTextFieldPassword      // 密码输入框
} YTHLoginTextFieldType;

@interface LoginFirstViewController ()<UITextFieldDelegate, UIScrollViewDelegate>
{
    AppDelegate *myDelegate;
    
}
@property (nonatomic, strong) UIScrollView *scrollView;
@property (nonatomic, strong) AFHTTPRequestOperationManager *manager;
@property (nonatomic, weak) UITextField *accountTF;
@property (nonatomic, weak) UITextField *passwordTF;
@property (nonatomic, weak) UIButton *loginBtn;
@property (nonatomic,strong)NSDictionary *jsonDict;
@property (nonatomic, assign)BOOL loginStatus;

@end

@implementation LoginFirstViewController

-(void)loadView{
    UIScrollView *sv = [[UIScrollView alloc] init];
    sv.frame = CGRectMake(0, 0, YTHScreenWidth, YTHScreenHeight);
    sv.contentSize = CGSizeMake(YTHScreenWidth, YTHScreenHeight+216);
    sv.backgroundColor = YTHColor(235, 235, 241);
    sv.scrollEnabled = NO;
    self.scrollView = sv;
    self.view = sv;
}
- (void)viewDidLoad {
    [super viewDidLoad];
    [self.navigationController setNavigationBarHidden:NO animated:YES];
    // Do any additional setup after loading the view.
    self.navigationController.navigationBar.barTintColor  = YTHColor(255, 32, 52);
    self.title = @"登录";
    if (!myDelegate) {
        myDelegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];
    }
    
    //一进来就取到账户
    NSString *u_account = [self getDictionaryWithKey:@"u_account" fromFile:@"login"];
    self.accountTF.text = u_account;
    
    [self _initNation];
    //设置帐号输入框
    [self setAccountTextFied];
    //设置密码输入框
    [self setPasswordTextFied];
    //登录
    [self setLoginButton];
    //忘记密码
    [self setForgetPass];
    [self tapToDismissKB];
    
    
    
    
}
#pragma mark - 设置帐号输入框
- (void)setAccountTextFied{
    UITextField *accountTF = [[UITextField alloc] initWithFrame:CGRectMake(YTHAdaptation(16), YTHAdaptation(32), YTHScreenWidth-YTHAdaptation(32), YTHAdaptation(40))];
    accountTF.delegate = self;
    accountTF.borderStyle = UITextBorderStyleNone;
    accountTF.backgroundColor = [UIColor whiteColor];
    accountTF.layer.borderColor = YTHColor(200, 200, 200).CGColor;
    [accountTF.layer setMasksToBounds:YES];
    [accountTF.layer setCornerRadius:4.5];
    accountTF.layer.borderWidth = 1;
    accountTF.leftView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 40, 45)];
    accountTF.leftViewMode = UITextFieldViewModeAlways;
    [accountTF addTarget:self action:@selector(textChanged) forControlEvents:UIControlEventEditingChanged];
    UIView *accountView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 40, 50)];
    // passView.backgroundColor = [UIColor orangeColor];
    UIImageView *accountImv = [[UIImageView alloc]initWithFrame:CGRectMake(15, 15, 16, 16)];
    accountImv.image = [UIImage imageNamed:@"user"];
    [accountView addSubview:accountImv];
    
    [accountTF.leftView addSubview:accountView];
    accountTF.font = [UIFont systemFontOfSize:14];
    accountTF.placeholder = @"请输入手机手机号";
    accountTF.clearButtonMode = UITextFieldViewModeWhileEditing;
    
    accountTF.text = @"18317950986";
    accountTF.tag = YTHLoginTextFieldAccount;
    self.accountTF = accountTF;
    [self.view addSubview:accountTF];
}
#pragma mark - 设置密码输入框
- (void)setPasswordTextFied{
    UITextField *passwordTF = [[UITextField alloc] initWithFrame:CGRectMake(YTHAdaptation(16), CGRectGetMaxY(self.accountTF.frame)+YTHAdaptation(20), YTHScreenWidth-YTHAdaptation(32),YTHAdaptation(40))];
    passwordTF.delegate = self;
    passwordTF.borderStyle = UITextBorderStyleNone;
    passwordTF.backgroundColor = [UIColor whiteColor];
    passwordTF.layer.borderColor = YTHColor(200, 200, 200).CGColor;
    [passwordTF.layer setMasksToBounds:YES];
    [passwordTF.layer setCornerRadius:4.5];
    passwordTF.layer.borderWidth = 1;
    passwordTF.leftView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 40, 45)];
    passwordTF.leftViewMode = UITextFieldViewModeAlways;
    [passwordTF addTarget:self action:@selector(textChanged) forControlEvents:UIControlEventEditingChanged];
    UIView *passView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 40, 50)];
    // passView.backgroundColor = [UIColor orangeColor];
    UIImageView *passImv = [[UIImageView alloc]initWithFrame:CGRectMake(15, 15, 16, 16)];
    passImv.image = [UIImage imageNamed:@"key"];
    [passView addSubview:passImv];
    [passwordTF.leftView addSubview:passView];
    passwordTF.font = [UIFont systemFontOfSize:14];
    passwordTF.placeholder = @"请输入密码";
    passwordTF.secureTextEntry = YES;
    passwordTF.tag = YTHLoginTextFieldPassword;
    passwordTF.returnKeyType = UIReturnKeyGo;
    UIButton *eyeButton = [UIButton buttonWithType:UIButtonTypeCustom];
    eyeButton.frame = CGRectMake(YTHScreenWidth-30-30
                                 , CGRectGetMaxY(self.accountTF.frame)+30, 24,24 );
    [eyeButton setImage:[UIImage imageNamed:@"look_off"] forState:UIControlStateNormal];
    [eyeButton addTarget:self action:@selector(eyeButtonAction:) forControlEvents:UIControlEventTouchUpInside];
    [self.view addSubview:eyeButton];
    
    self.passwordTF = passwordTF;
    [self.view addSubview:passwordTF];
    [self.view insertSubview:self.passwordTF belowSubview:eyeButton];
}
-(void)eyeButtonAction:(UIButton *)btn
{
    btn.selected = !btn.selected;
    if (btn.selected == YES) {
        [btn setImage:[UIImage imageNamed:@"look"] forState:UIControlStateNormal];
        
        self.passwordTF.secureTextEntry = NO;
        
    } else {
        [btn setImage:[UIImage imageNamed:@"look_off"] forState:UIControlStateNormal];
        self.passwordTF.secureTextEntry = YES;
    }
    
}
#pragma mark - 设置登录按钮
- (void)setLoginButton{
    UIButton *loginBtn = [[UIButton alloc]initWithFrame:CGRectMake(YTHAdaptation(16),CGRectGetMaxY(self.passwordTF.frame)+YTHAdaptation(44), YTHScreenWidth-YTHAdaptation(32),YTHAdaptation(40))];
    
    [loginBtn setBackgroundImage:[UIImage imageNamed:@"btn_tile"] forState:UIControlStateNormal];
    loginBtn.layer.borderColor = YTHColor(200, 200, 200).CGColor;
    [loginBtn.layer setMasksToBounds:YES];
    [loginBtn.layer setCornerRadius:4.5];
    loginBtn.layer.borderWidth = 1;
    
    [loginBtn setTitle:@"登录" forState:UIControlStateNormal];
    [loginBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    [loginBtn addTarget:self action:@selector(clickLoginBtn:) forControlEvents:UIControlEventTouchUpInside];
    self.loginBtn = loginBtn;
    self.loginBtn.enabled = NO;
    [self.scrollView addSubview:loginBtn];
}
#pragma mark - 忘记密码
-(void)setForgetPass
{
    UIButton *forgetPaButton = [UIButton buttonWithType:UIButtonTypeCustom];
    forgetPaButton.title = @"";
    forgetPaButton.frame = CGRectMake(YTHScreenWidth-YTHAdaptation(70), CGRectGetMaxY(self.loginBtn.frame)+YTHAdaptation(10), YTHAdaptation(60), YTHAdaptation(20));
    [forgetPaButton setTitle:@"忘记密码" forState:UIControlStateNormal];
    [forgetPaButton setTitleColor:[UIColor blueColor] forState:UIControlStateNormal];
    forgetPaButton.titleLabel.font = [UIFont systemFontOfSize:12];
    [forgetPaButton addTarget:self action:@selector(forgetButtonAction) forControlEvents:UIControlEventTouchUpInside];
    [self.scrollView addSubview:forgetPaButton];
}
#pragma mark - 点击忘记密码
-(void)forgetButtonAction
{
    ForgetPassViewController *forgetPassVC = [[ForgetPassViewController alloc]init];
    [self.navigationController pushViewController:forgetPassVC animated:YES];
    
}
#pragma mark -点击登录按钮
- (void)clickLoginBtn:(id)sender{
    NSString *passtext =@"v1/user/login";
    YTHLog(@"passtext=%@",passtext);
    NSString *text = [NSData AES256EncryptWithPlainText:passtext passtext:[self md5:self.passwordTF.text]];
    NSLog(@"加密后:%@    md5:%@    秘密原文:%@",text,[self md5:self.passwordTF.text],self.passwordTF.text);
    //保存taken：密码md5
    myDelegate.accessToken = [self md5:self.passwordTF.text];
    NSLog(@"登录md5密码%@",myDelegate.accessToken);
    // 封装请求参数
    NSMutableDictionary *md = [NSMutableDictionary dictionary];
    md[@"account"] =self.accountTF.text;
    md[@"accessToken"] =text;
    
    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
    self.manager = manager;
    NSString *url = Url;
    NSString *urlString = [NSString stringWithFormat:@"%@v1/user/login",url];
    [MBProgressHUD showMessage:@"正在登录..." toView:self.view];
    [manager POST:urlString parameters:md success:^(AFHTTPRequestOperation *operation, id responseObject) {
        // self.jsonDict = [[NSDictionary alloc]init];
        self.jsonDict = responseObject;
        NSLog(@"登录%ld",(long)[operation.response statusCode]);
        NSLog(@"登录信息%@",self.jsonDict);
        if ([operation.response statusCode]/100==2) {
            SUCArchive *archive = [SUCArchive shareArchiveManager];
            // 网络请求成功, 就在用户偏好中设置登录状态
            NSUserDefaults *user=[NSUserDefaults standardUserDefaults];
            
            _loginStatus = YES;
            [user setBool:self.loginStatus forKey:LoginStatus];
            [user synchronize];
            // 网络请求成功不一定登录成功, 要根据请求返回的状态来判断是否真的登录成功
            [MBProgressHUD hideHUDForView:self.view];
            //保存1
            if ([archive online]) {
                // 登录成功, 将用户信息保存到沙盒的 Document 路径下
                SUCUser *user = [SUCUser shareUser];
                user = [SUCUser objectWithKeyValues:responseObject[@"userInfo"]];
                NSMutableDictionary *md = [NSMutableDictionary dictionary];
                md[@"uuid"] = user.uuid;
                md[@"name"] = user.name;
                md[@"mobile"] = user.mobile;
                md[@"avatar"] = user.avatar;
                md[@"account"] = user.account;
                archive.userDic = md;
                [archive synchronize];
            }
            
            
            //密码清空
            self.passwordTF.text = @"";
            //登录账号
            myDelegate.account = self.accountTF.text;
            myDelegate.userInfo = [responseObject objectForKey:@"userInfo"];
            //还要判断一下学校是否为空
            NSString *universityId = [[responseObject objectForKey:@"userInfo"]objectForKey:@"universityId"];
            NSLog(@"学校id%@",universityId);
            if (!IsNilOrNull([[responseObject objectForKey:@"userInfo"]objectForKey:@"universityId"])) {
                [self performSelector:@selector(goBackMine) withObject:nil afterDelay:0.3];
                
            }else {
                AddInformationViewController *addForVC = [[AddInformationViewController alloc]init];
                [self.navigationController pushViewController:addForVC animated:YES];
                
            }
            
            
            
        }
    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
        [MBProgressHUD hideHUDForView:self.view animated:YES];
        
        NSLog(@"登录错误error code %ld",(long)[operation.response statusCode]);
               self.jsonDict = operation.responseObject;
        NSLog(@"登录%@", self.jsonDict);
        [MBProgressHUD showError:[ self.jsonDict objectForKey:@"info"]];
        
    }];
    
    
    //     [self performSelector:@selector(cancelAFN) withObject:nil afterDelay:10];
    
    
    
}
- (void)cancelAFN{
    [self.manager.operationQueue cancelAllOperations];
    [MBProgressHUD hideHUDForView:self.view];
    [MBProgressHUD showError:@"登录失败, 请稍后再试"];
}

- (void)goBackMine{
    [NSObject cancelPreviousPerformRequestsWithTarget:self];
    [self performSelector:@selector(doNext) withObject:nil afterDelay:0.5];
    SUCTabBarViewController *mainVC = [[SUCTabBarViewController alloc]init];
    [self presentViewController:mainVC animated:NO completion:nil];
    
}
- (void)isLogin:(isLoginBlock)block{
    self.isLoginBlock = block;
}
- (void)doNext{
    if (self.isLoginBlock != nil) {
        self.isLoginBlock();
    }
}

#pragma mark - 设置导航栏
-(void)_initNation
{
    // 左边的取消按钮
    UIButton *cancelBtn = [[UIButton alloc] init];
    cancelBtn.frame = CGRectMake(0, 0, 40, 40);
    [cancelBtn setTitle:@"取消" forState:UIControlStateNormal];
    [cancelBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    cancelBtn.titleLabel.font = [UIFont systemFontOfSize:16];
    
    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:cancelBtn];
    [cancelBtn addTarget:self action:@selector(clickCode) forControlEvents:UIControlEventTouchUpInside];
    //右边
    UIButton *rightButton = [[UIButton alloc] init];
    rightButton.frame = CGRectMake(0, 0, 40, 40);
    [rightButton setTitle:@"注册" forState:UIControlStateNormal];
    [rightButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    rightButton.titleLabel.font = [UIFont systemFontOfSize:16];
    
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:rightButton];
    [rightButton addTarget:self action:@selector(regisButtonAction) forControlEvents:UIControlEventTouchUpInside];
    
    
}
#pragma mark - 跳转注册
-(void)regisButtonAction
{
    RegisterViewController *regisVC = [[RegisterViewController alloc]init];
    WXNavigationController *nav = [[WXNavigationController alloc]initWithRootViewController:regisVC];
    
    [self presentViewController:nav animated:NO completion:nil];
    //[self.navigationController pushViewController:regisVC animated:YES];
}
-(void)clickCode
{
    [self dismissViewControllerAnimated:YES completion:nil];
    //[self.navigationController popViewControllerAnimated:YES];
    
}
- (NSString *)md5:(NSString *)str {
    const char *cStr = [str UTF8String];
    unsigned char result[16];
    CC_MD5(cStr, strlen(cStr), result); // This is the md5 call
    return [NSString stringWithFormat:
            @"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x",
            result[0], result[1], result[2], result[3],
            result[4], result[5], result[6], result[7],
            result[8], result[9], result[10], result[11],
            result[12], result[13], result[14], result[15]
            ];
}
#pragma mark -利用正则表达式验证邮箱的合法性
// 利用正则表达式验证邮箱的合法性
- (BOOL)isValidateEmail:(NSString *)email {
    
    NSString *emailRegex = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}";
    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegex];
    return [emailTest evaluateWithObject:email];
    
}

- (void)textChanged{
    self.loginBtn.enabled = (self.accountTF.text.length>0 && self.passwordTF.text.length>0);
}
//- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string{
//    NSString * toBeString = [textField.text stringByReplacingCharactersInRange:range withString:string]; //得到输入框的内容
//    if (textField==self.accountTF) {
//        if (![self isValidatePhone:toBeString]) {
//            [MBProgressHUD showError:@"请输入正确"];
//
//        }
//    }
//       return YES;
//
//}
#pragma mark - 验证手机号合法性
- (BOOL)isValidatePhone:(NSString *)phone {
    
    NSString *phoneRegex = @"^1(3[0-9]|5[0-9]|7[0-9]|8[0-9])\\d{8}$";
    NSPredicate *phoneTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", phoneRegex];
    return [phoneTest evaluateWithObject:phone];
    
}
-(NSString *)ret32bitString

{
    
    char data[32];
    
    for (int x=0;x<32;data[x++] = (char)('A' + (arc4random_uniform(26))));
    
    return [[NSString alloc] initWithBytes:data length:32 encoding:NSUTF8StringEncoding];
    
}
#pragma mark - 设置点击空白处隐藏键盘
- (void)tapToDismissKB{
    UITapGestureRecognizer *tapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(dismissKeyboard)];
    // 设置成NO表示当前控件响应后会传播到其他控件上，默认为YES
    tapGestureRecognizer.cancelsTouchesInView = NO;
    [self.view addGestureRecognizer:tapGestureRecognizer];
}
- (void)dismissKeyboard{
    [self.view endEditing:YES];
}
- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/*
 #pragma mark - Navigation
 
 // In a storyboard-based application, you will often want to do a little preparation before navigation
 - (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
 // Get the new view controller using [segue destinationViewController].
 // Pass the selected object to the new view controller.
 }
 */

@end
